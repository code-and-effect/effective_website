version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    parallelism: 1 # run three instances of this job in parallel
    docker: # run the steps with Docker
    # Find your ruby image: https://hub.docker.com/r/circleci/ruby/tags
      - image: circleci/ruby:2.7.1-node-browsers
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
          NODE_ENV: test
      - image: circleci/postgres:9.5-alpine # database image
        environment: # environment variables for database
          POSTGRES_USER: postgres
          POSTGRES_DB: example_test
          POSTGRES_PASSWORD: ""
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      - run:
          name: Set up config
          command: |
            cp .env.example .env
            cp config/database.yml.postgres config/database.yml

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      - restore_cache:
          keys:
            - example

      - run:
          name: Install Bundle and Yarn
          command: |
            curl -o- -L https://yarnpkg.com/install.sh | bash
            yarn global add sass
            bundle install
            yarn

      - save_cache:
          key: example
          paths:
            - ./vendor/bundle
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Run Unit Tests
          command: bundle exec rails test

      - run:
          name: Run System Tests
          command: bundle exec rails test:system

      - store_artifacts:
          path: tmp/screenshots
